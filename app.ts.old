import Kia from "https://deno.land/x/kia@0.4.1/mod.ts";
import { loadTest } from "./cli/commands/test.ts";
import { comK8 } from "./cli/commands/k8Command.ts";
import { Quit } from "./cli/commands/quit.ts";
import { k6Menu } from './cli/handlers/k6Handler/k6.ts';
import {
    Select,
  } from "https://deno.land/x/cliffy@v1.0.0-rc.3/prompt/mod.ts";
import chalk from 'npm:chalk@5.3.0';
import { cache } from './cli/handlers/cache.ts';

// Is storing application state a good idea globablly? Who knows?
const pCache = cache; 

export const runCLI = async (pCache:object) =>{
  const genericOptions:object = {
      KUBE_CONF: {name:"Kubernetes Config Menu", value:"k8"},
      K6_MENU: {name: "K6 Performance Testing Menu", value: "k6"},
      LOAD_TEST: {name:"Load testing Menu !!Will test against Default K8 Cluster unless configured!!", value:"lt"},
      EXIT: {name:"Exit", value:"q"},
  }
  
  let choice = ""

  // Placeholder switch
  while(choice != "q"){
      choice = await Select.prompt({
          message: chalk.inverse("====== Main Menu: ======="),
          options: [
              genericOptions.KUBE_CONF,
              genericOptions.K6_MENU,
              genericOptions.LOAD_TEST,
              genericOptions.EXIT,
          ],
      })
      switch(choice){
          case 'lt':
              console.log(choice)
              await loadTest(pCache);
              break;
          case 'k8':
              await comK8(pCache);
              break;
          case 'k6':
              await k6Menu(pCache);
              break;
      }
  }

  Quit();
}

runCLI(pCache);